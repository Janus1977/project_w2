<?php
		//Generated by ObjectGenerator::generate()
class Gabarit {
	protected $_id; /* bigint(20) */
	protected $_nom; /* varchar(50) */
	protected $_x_depart; /* int(10) unsigned */
	protected $_y_depart; /* int(10) unsigned */
	protected $_x_arrivee; /* int(10) unsigned */
	protected $_y_arrivee; /* int(10) unsigned */
	protected $_taille; /* tinyint(2) unsigned */
	protected $_empty = true; // permet de savoir si l'objet est vide

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Gabarit11]*/	/*[/TAG-Gabarit11]*/


	public function __construct($id=0,$nom='',$x_depart=0,$y_depart=0,$x_arrivee=0,$y_arrivee=0,$taille=0) {
		//Generated by ObjectGenerator::generateConstruct()
		$this->_id = $id;
		$this->_nom = $nom;
		$this->_x_depart = $x_depart;
		$this->_y_depart = $y_depart;
		$this->_x_arrivee = $x_arrivee;
		$this->_y_arrivee = $y_arrivee;
		$this->_taille = $taille;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__construct1]*/	/*[/TAG-__construct1]*/


	}


	public function __clone() {
		//Generated by ObjectGenerator::generateClone()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__clone1]*/	/*[/TAG-__clone1]*/

		//Sur le clonage d'un objet on supprime l'identifiant
		$this->_description .= ' / Clone '.__CLASS__.' ID '.$this->_id;
		$this->_id = 0;
	}


	public function setId($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setId1]*/	/*[/TAG-setId1]*/

		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if (!$this->getEmpty()) {
		return;
		}
		$this->_id = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setId2]*/	/*[/TAG-setId2]*/

	}



	public function setNom($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setNom1]*/	/*[/TAG-setNom1]*/

		$this->_nom = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setNom2]*/	/*[/TAG-setNom2]*/

	}



	public function setX_depart($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setX_depart1]*/	/*[/TAG-setX_depart1]*/

		$this->_x_depart = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setX_depart2]*/	/*[/TAG-setX_depart2]*/

	}



	public function setY_depart($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setY_depart1]*/	/*[/TAG-setY_depart1]*/

		$this->_y_depart = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setY_depart2]*/	/*[/TAG-setY_depart2]*/

	}



	public function setX_arrivee($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setX_arrivee1]*/	/*[/TAG-setX_arrivee1]*/

		$this->_x_arrivee = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setX_arrivee2]*/	/*[/TAG-setX_arrivee2]*/

	}



	public function setY_arrivee($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setY_arrivee1]*/	/*[/TAG-setY_arrivee1]*/

		$this->_y_arrivee = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setY_arrivee2]*/	/*[/TAG-setY_arrivee2]*/

	}



	public function setTaille($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet()

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setTaille1]*/	/*[/TAG-setTaille1]*/

		$this->_taille = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setTaille2]*/	/*[/TAG-setTaille2]*/

	}




	public function getId() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_id;
	}



	public function getNom() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_nom;
	}



	public function getX_depart() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_x_depart;
	}



	public function getY_depart() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_y_depart;
	}



	public function getX_arrivee() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_x_arrivee;
	}



	public function getY_arrivee() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_y_arrivee;
	}



	public function getTaille() {
		//Generated by ObjectGenerator::generateGet()
		return $this->_taille;
	}



	public function __toString() {
		//Generated by ObjectGenerator::generateToString()
		$chaine = 'Objet '.get_class($this).':<br/>';
		$chaine .= 'Le champ id vaut '.$this->getId().'<br/>';
		$chaine .= 'Le champ nom vaut '.$this->getNom().'<br/>';
		$chaine .= 'Le champ x_depart vaut '.$this->getX_depart().'<br/>';
		$chaine .= 'Le champ y_depart vaut '.$this->getY_depart().'<br/>';
		$chaine .= 'Le champ x_arrivee vaut '.$this->getX_arrivee().'<br/>';
		$chaine .= 'Le champ y_arrivee vaut '.$this->getY_arrivee().'<br/>';
		$chaine .= 'Le champ taille vaut '.$this->getTaille().'<br/>';

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__toString1]*/	/*[/TAG-__toString1]*/

		return $chaine;
	}

	public function save() {
		//Generated by ObjectGenerator::generateSave()
		if ($this->getId() > 0) {
			/* un identifiant superieur a 0 implique un ancien objet => UPDATE */
			$this->update();
		} else {
			$requete = 'INSERT INTO gabarit (id,nom,x_depart,y_depart,x_arrivee,y_arrivee,taille)';
			$requete .= ' VALUES ';
			$requete .= '(';
			$requete .= '\'\','; //valeur forcee pour l'insertion
			$requete .= '\''.$this->getNom().'\',';
			$requete .= $this->getX_depart().',';
			$requete .= $this->getY_depart().',';
			$requete .= $this->getX_arrivee().',';
			$requete .= $this->getY_arrivee().',';
			$requete .= $this->getTaille().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ')';
			return $requete;
		}
	}

	public function update() {
		//Generated by ObjectGenerator::generateUpdate()
		if ($this->getId() == 0 || $this->getId() == null) {
			/* un identifiant 0 ou null implique un nouvel objet => INSERT */
			$this->save();
		} else {
			$requete = 'UPDATE gabarit SET ';
			$requete .= 'nom = \''.$this->getNom().'\',';
			$requete .= 'x_depart = '.$this->getX_depart().',';
			$requete .= 'y_depart = '.$this->getY_depart().',';
			$requete .= 'x_arrivee = '.$this->getX_arrivee().',';
			$requete .= 'y_arrivee = '.$this->getY_arrivee().',';
			$requete .= 'taille = '.$this->getTaille().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ' WHERE id = '.$this->getId();
			return $requete;
		}
	}

	public function delete() {
		//Generated by ObjectGenerator::generateDelete()
		if ($this->getId() == 0 || $this->getId() == null) {
			/* ERREUR A FAIRE SORTIR */
			/* TODO */
		} else {
			return 'DELETE FROM gabarit WHERE id = '.$this->getId();
		}
	}

	public function getParent() {
		//Generated by ObjectGenerator::generateGetParent()
		return ('parent::__construct($id,$nom,$x_depart,$y_depart,$x_arrivee,$y_arrivee,$taille);');
	}

	public function getAttributes() {
		//Generated by ObjectGenerator::generateGetAttributes()
		$result = array();
		$result2 = array();
		$reflection = new ReflectionClass($this);
		$result = $reflection->getdefaultProperties();
		$result = array_keys($result);
		foreach ($result AS $data) {
			$result2[] = substr($data,1);
		}
		return $result2;
	}

	public function compareTo($object) {
		//Generated by ObjectGenerator::generateCompareTo()
		$data = array();
		if ($object instanceof Gabarit) {
			if ($this->_id != $object->getId()) {
				$data['id'] = $object->getId();
			}
			if ($this->_nom != $object->getNom()) {
				$data['nom'] = $object->getNom();
			}
			if ($this->_x_depart != $object->getX_depart()) {
				$data['x_depart'] = $object->getX_depart();
			}
			if ($this->_y_depart != $object->getY_depart()) {
				$data['y_depart'] = $object->getY_depart();
			}
			if ($this->_x_arrivee != $object->getX_arrivee()) {
				$data['x_arrivee'] = $object->getX_arrivee();
			}
			if ($this->_y_arrivee != $object->getY_arrivee()) {
				$data['y_arrivee'] = $object->getY_arrivee();
			}
			if ($this->_taille != $object->getTaille()) {
				$data['taille'] = $object->getTaille();
			}
		}
		return $data;
	}

	public function encodeDecodeJSON($json_str='') {
		//Generated by ObjectGenerator::generateEncodeDecodeJSON()
		if ($json_str == '') {
			// Objet standard a remplir
			$json= new stdClass();
			foreach ($this as $key => $value) {
				if (substr($key,0,1) == '_') {
					$key = substr($key,1);
					//on evite de faire sortir les objet fonctionnels
					if (strtolower(substr($key,0,1)) != 'o') {
						$json->$key = $value;
					}
				}
				$json->$key = $value;
			}
			return json_encode($json);
		} else {
			/* decodage et hydratation des datas JSON */
			$json = json_decode($json_str, 1);
			foreach ($json as $key => $value) {
				$method = 'set'.ucfirst($key);
				//Si la methode existe alors on l'utilise
				if (method_exists($this, $method)) {
					$this->$method($value);
				}
			}
		}
	}

	public function getClass() {
		//Generated by ObjectGenerator::generateGetClass()
		return get_class($this);
	}

	public function getEmpty() {
		//Generated by ObjectGenerator::generateIsEmpty()
		return $this->_empty;
	}

	public function affiche() {
		//Generated by ObjectGenerator::generateAffiche()
		/* Chargement de Smarty */
		require_once(_SMARTY_LOAD_);
		$smarty->assign('gabarit',$this);
		$smarty->assign('aListeMethodes',get_class_methods($this));
		$smarty->assign('urlVersMiniature',_URL_MINIATURES_.$this->getNom().'.jpg');
		/* Appel de l'affichage pour la classe en cour d'utilisation */
		$smarty->display(_TEMPLATES_BASE_.'classes/Gabarit.tpl');
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Gabarit21]*/	/*[/TAG-Gabarit21]*/

}
?>