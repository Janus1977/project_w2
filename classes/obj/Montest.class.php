<?php
		//Generated by ObjectGenerator::generate() on 02/08/2017 14:24:29
class Montest {
	protected $_id; /* int(11) */
	protected $_nom; /* text */
	protected $_prenom; /* text */

	/* identifiant composite Test */
	protected $_test; /* int(11) */
	/* liste des objets Test */
	protected $_oTest; /* test Object*/

	protected $_empty = true; // permet de savoir si l'objet est vide

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Montest11]*/	/*[/TAG-Montest11]*/


	public function __construct($id=0,$nom='',$prenom='',$test=0) {
		//Generated by ObjectGenerator::generateConstruct() on 02/08/2017 14:24:29
		$this->_id = $id;
		$this->_nom = $nom;
		$this->_prenom = $prenom;
		$this->_test = $test;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__construct1]*/	/*[/TAG-__construct1]*/


	}


	public function __clone() {
		//Generated by ObjectGenerator::generateClone() on 02/08/2017 14:24:29

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__clone1]*/	/*[/TAG-__clone1]*/

		//Sur le clonage d'un objet on supprime l'identifiant
		$this->_description .= ' / Clone '.__CLASS__.' ID '.$this->_id;
		$this->_id = 0;
	}


	public function setId($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 02/08/2017 14:24:29

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setId1]*/	/*[/TAG-setId1]*/

		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if (!$this->getEmpty()) {
		return;
		}
		$this->_id = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setId2]*/	/*[/TAG-setId2]*/

	}



	public function setNom($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 02/08/2017 14:24:29

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setNom1]*/	/*[/TAG-setNom1]*/

		$this->_nom = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setNom2]*/	/*[/TAG-setNom2]*/

	}



	public function setPrenom($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 02/08/2017 14:24:29

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setPrenom1]*/	/*[/TAG-setPrenom1]*/

		$this->_prenom = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setPrenom2]*/	/*[/TAG-setPrenom2]*/

	}



	public function setTest($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 02/08/2017 14:24:29

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setTest1]*/	/*[/TAG-setTest1]*/

		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if ($this->getEmpty() === false) {
		return;
		}
		/* un identifiant est toujours un entier non nul */
		if (!intval($nouvelleValeur) || $nouvelleValeur < 0) {
			return false;
		}
		$this->_test = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setTest2]*/	/*[/TAG-setTest2]*/

	}

	protected function setTestObject() {
		//Generated by ObjectGenerator::generateSet() on 02/08/2017 14:24:29

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setTestObject1]*/	/*[/TAG-setTestObject1]*/

		if ($this->_test > 0) {
			$this->_oTest = FactoryTest::getFromTableTest($this->_test);
		}

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setTestObject2]*/	/*[/TAG-setTestObject2]*/

	}




	public function getId() {
		//Generated by ObjectGenerator::generateGet() on 02/08/2017 14:24:29
		return $this->_id;
	}



	public function getNom() {
		//Generated by ObjectGenerator::generateGet() on 02/08/2017 14:24:29
		return $this->_nom;
	}



	public function getPrenom() {
		//Generated by ObjectGenerator::generateGet() on 02/08/2017 14:24:29
		return $this->_prenom;
	}



	public function getTest() {
		//Generated by ObjectGenerator::generateGet() on 02/08/2017 14:24:29
		return $this->_test;
	}

	public function getTestObject() {
		//Generated by ObjectGenerator::generateGet() on 02/08/2017 14:24:29
		if (empty($this->_oTest)) {
			$this->setTestObject();
		}
		if ((empty($this->_oTest) || is_null($this->_oTest))&& $this->_test > 0) {
			$this->setTestObject();
		}

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-getTestObject1]*/	/*[/TAG-getTestObject1]*/

		return $this->_oTest;
	}



	public function __toString() {
		//Generated by ObjectGenerator::generateToString() on 02/08/2017 14:24:29
		$chaine = 'Objet '.get_class($this).':<br/>';
		$chaine .= 'Le champ id vaut '.$this->getId().'<br/>';
		$chaine .= 'Le champ nom vaut '.$this->getNom().'<br/>';
		$chaine .= 'Le champ prenom vaut '.$this->getPrenom().'<br/>';
		$chaine .= 'Le champ test vaut '.$this->getTest().'<br/>';

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__toString1]*/	/*[/TAG-__toString1]*/

		return $chaine;
	}

	public function save() {
		//Generated by ObjectGenerator::generateSave() on 02/08/2017 14:24:29
		if ($this->getId() > 0) {
			/* un identifiant superieur a 0 implique un ancien objet => UPDATE */
			$this->update();
		} else {
			$requete = 'INSERT INTO montest (id,nom,prenom,test)';
			$requete .= ' VALUES ';
			$requete .= '(';
			$requete .= '\'\','; //valeur forcee pour l'insertion
			$requete .= '\''.$this->getNom().'\',';
			$requete .= '\''.$this->getPrenom().'\',';
			$requete .= $this->getTest().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ')';
			return $requete;
		}
	}

	public function update() {
		//Generated by ObjectGenerator::generateUpdate() on 02/08/2017 14:24:29
		if ($this->getId() == 0 || $this->getId() == null) {
			/* un identifiant 0 ou null implique un nouvel objet => INSERT */
			$this->save();
		} else {
			$requete = 'UPDATE montest SET ';
			$requete .= 'nom = \''.$this->getNom().'\',';
			$requete .= 'prenom = \''.$this->getPrenom().'\',';
			$requete .= 'test = '.$this->getTest().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ' WHERE id = '.$this->getId();
			return $requete;
		}
	}

	public function delete() {
		//Generated by ObjectGenerator::generateDelete() on 02/08/2017 14:24:29
		if ($this->getId() == 0 || $this->getId() == null) {
			throw new Exception(get_class($this).": aucun identifiant donn&eacute; pour supprimer");
		} else {
			return 'DELETE FROM montest WHERE id = '.$this->getId();
		}
	}

	public function getParent() {
		//Generated by ObjectGenerator::generateGetParent() on 02/08/2017 14:24:29
		return ('parent::__construct($id,$nom,$prenom,$test);');
	}

	public function getAttributes() {
		//Generated by ObjectGenerator::generateGetAttributes() on 02/08/2017 14:24:29
		$result = array();
		$result2 = array();
		$reflection = new ReflectionClass($this);
		$result = $reflection->getdefaultProperties();
		$result = array_keys($result);
		foreach ($result AS $data) {
			$result2[] = substr($data,1);
		}
		return $result2;
	}

	public function compareTo($object) {
		//Generated by ObjectGenerator::generateCompareTo() on 02/08/2017 14:24:29
		$data = array();
		if ($object instanceof Montest) {
			if ($this->_id != $object->getId()) {
				$data['id'] = $object->getId();
			}
			if ($this->_nom != $object->getNom()) {
				$data['nom'] = $object->getNom();
			}
			if ($this->_prenom != $object->getPrenom()) {
				$data['prenom'] = $object->getPrenom();
			}
			if ($this->_test != $object->getTest()) {
				$data['test'] = $object->getTest();
			}
		}
		return $data;
	}

	public function encodeDecodeJSON($json_str='') {
		//Generated by ObjectGenerator::generateEncodeDecodeJSON() on 02/08/2017 14:24:29
		if ($json_str == '') {
			// Objet standard a remplir
			$json= new stdClass();
			foreach ($this as $key => $value) {
				if (substr($key,0,1) == '_') {
					$key = substr($key,1);
					//on evite de faire sortir les objet fonctionnels
					if (strtolower(substr($key,0,1)) != 'o') {
						$json->$key = $value;
					}
				}
				$json->$key = $value;
			}
			return json_encode($json);
		} else {
			/* decodage et hydratation des datas JSON */
			$json = json_decode($json_str, 1);
			foreach ($json as $key => $value) {
				$method = 'set'.ucfirst($key);
				//Si la methode existe alors on l'utilise
				if (method_exists($this, $method)) {
					$this->$method($value);
				}
			}
		}
	}

	public function getClass() {
		//Generated by ObjectGenerator::generateGetClass() on 02/08/2017 14:24:29
		return get_class($this);
	}

	public function getEmpty() {
		//Generated by ObjectGenerator::generateIsEmpty() on 02/08/2017 14:24:29
		return $this->_empty;
	}

	public function affiche() {
		//Generated by ObjectGenerator::generateAffiche() on 02/08/2017 14:24:29
		/* Chargement de Smarty */
		require_once(_SMARTY_LOAD_);
		$smarty->assign('montest',$this);
		$smarty->assign('aListeMethodes',get_class_methods($this));
		$smarty->assign('urlVersMiniature',_URL_MINIATURES_.$this->getNom().'.jpg');
		/* Appel de l'affichage pour la classe en cour d'utilisation */
		$smarty->display(_TEMPLATES_BASE_.'classes/Montest.tpl');
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Montest21]*/	/*[/TAG-Montest21]*/

}
?>