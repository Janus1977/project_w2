<?php
		//Generated by ObjectGenerator::generate() on 03/04/2017 15:27:43
class Equipement_joueur extends Equipement {

	/* identifiant composite Membre */
	protected $_membre; /* bigint(20) unsigned */
	/* liste des objets Membre */
	protected $_oMembre; /* membre Object*/


	/* identifiant composite Unite_joueur */
	protected $_unite_joueur; /* bigint(20) unsigned */
	/* liste des objets Unite_joueur */
	protected $_oUnite_joueur; /* unite_joueur Object*/

	protected $_empty = true; // permet de savoir si l'objet est vide

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Equipement_joueur11]*/	/*[/TAG-Equipement_joueur11]*/


	public function __construct($id=0,$membre=0,$unite_joueur=0,$nom='',$description='',$categorie=0,$cp='',$lp='',$mtcp='',$mtlp='',$dommage='',$msvg='',$gabarit=0,$type=0,$fo=0,$sauvegarde=0,$mmvt='',$encombrement=0,$deux_mains=0,$cout=0,$date_creation='',$used=0,$chemin='',$tile=0,$usure=0,$demontable=0,$date_fin_reparation='',$ingame=0) {
		//Generated by ObjectGenerator::generateConstruct() on 03/04/2017 15:27:43
		parent::__construct($id,$nom,$description,$categorie,$cp,$lp,$mtcp,$mtlp,$dommage,$msvg,$gabarit,$type,$fo,$sauvegarde,$mmvt,$encombrement,$deux_mains,$cout,$date_creation,$chemin,$tile,$usure,$demontable,$date_fin_reparation,$ingame);
		$this->_membre = $membre;
		$this->_unite_joueur = $unite_joueur;
		$this->_used = $used;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__construct1]*/	/*[/TAG-__construct1]*/


	}


	public function __clone() {
		//Generated by ObjectGenerator::generateClone() on 03/04/2017 15:27:43

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__clone1]*/	/*[/TAG-__clone1]*/

		//Sur le clonage d'un objet on supprime l'identifiant
		$this->_description .= ' / Clone '.__CLASS__.' ID '.$this->_id;
		$this->_id = 0;
	}


	public function setMembre($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 03/04/2017 15:27:43

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setMembre1]*/	/*[/TAG-setMembre1]*/

		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if ($this->getEmpty() === false) {
		return;
		}
		/* un identifiant est toujours un entier non nul */
		if (!intval($nouvelleValeur) || $nouvelleValeur < 0) {
			return false;
		}
		$this->_membre = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setMembre2]*/	/*[/TAG-setMembre2]*/

	}

	protected function setMembreObject() {
		//Generated by ObjectGenerator::generateSet() on 03/04/2017 15:27:43

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setMembreObject1]*/	/*[/TAG-setMembreObject1]*/

		if ($this->_membre > 0) {
			$this->_oMembre = FactoryMembre::getFromTableMembre($this->_membre);
		}

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setMembreObject2]*/	/*[/TAG-setMembreObject2]*/

	}



	public function setUnite_joueur($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 03/04/2017 15:27:43

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setUnite_joueur1]*/	/*[/TAG-setUnite_joueur1]*/

		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if ($this->getEmpty() === false) {
		return;
		}
		/* un identifiant est toujours un entier non nul */
		if (!intval($nouvelleValeur) || $nouvelleValeur < 0) {
			return false;
		}
		$this->_unite_joueur = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setUnite_joueur2]*/	/*[/TAG-setUnite_joueur2]*/

	}

	protected function setUnite_joueurObject() {
		//Generated by ObjectGenerator::generateSet() on 03/04/2017 15:27:43

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setUnite_joueurObject1]*/	/*[/TAG-setUnite_joueurObject1]*/

		if ($this->_unite_joueur > 0) {
			$this->_oUnite_joueur = FactoryUnite_joueur::getFromTableUnite_joueur($this->_unite_joueur);
		}

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setUnite_joueurObject2]*/	/*[/TAG-setUnite_joueurObject2]*/

	}



	public function setUsed($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 03/04/2017 15:27:43

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setUsed1]*/	/*[/TAG-setUsed1]*/

		$this->_used = $nouvelleValeur;

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-setUsed2]*/	/*[/TAG-setUsed2]*/

	}




	public function getMembre() {
		//Generated by ObjectGenerator::generateGet() on 03/04/2017 15:27:43
		return $this->_membre;
	}

	public function getMembreObject() {
		//Generated by ObjectGenerator::generateGet() on 03/04/2017 15:27:43
		if (empty($this->_oMembre)) {
			$this->setMembreObject();
		}
		if ((empty($this->_oMembre) || is_null($this->_oMembre))&& $this->_membre > 0) {
			$this->setMembreObject();
		}

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-getMembreObject1]*/	/*[/TAG-getMembreObject1]*/

		return $this->_oMembre;
	}



	public function getUnite_joueur() {
		//Generated by ObjectGenerator::generateGet() on 03/04/2017 15:27:43
		return $this->_unite_joueur;
	}

	public function getUnite_joueurObject() {
		//Generated by ObjectGenerator::generateGet() on 03/04/2017 15:27:43
		if (empty($this->_oUnite_joueur)) {
			$this->setUnite_joueurObject();
		}

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-getUnite_joueurObject1]*/	/*[/TAG-getUnite_joueurObject1]*/

			return $this->_oUnite_joueur;
	}



	public function getUsed() {
		//Generated by ObjectGenerator::generateGet() on 03/04/2017 15:27:43
		return $this->_used;
	}



	public function __toString() {
		//Generated by ObjectGenerator::generateToString() on 03/04/2017 15:27:43
		$chaine = 'Objet '.get_class($this).':<br/>';
		$chaine .= 'Le champ id vaut '.$this->getId().'<br/>';
		$chaine .= 'Le champ membre vaut '.$this->getMembre().'<br/>';
		$chaine .= 'Le champ unite_joueur vaut '.$this->getUnite_joueur().'<br/>';
		$chaine .= 'Le champ nom vaut '.$this->getNom().'<br/>';
		$chaine .= 'Le champ description vaut '.$this->getDescription().'<br/>';
		$chaine .= 'Le champ categorie vaut '.$this->getCategorie().'<br/>';
		$chaine .= 'Le champ cp vaut '.$this->getCp().'<br/>';
		$chaine .= 'Le champ lp vaut '.$this->getLp().'<br/>';
		$chaine .= 'Le champ mtcp vaut '.$this->getMtcp().'<br/>';
		$chaine .= 'Le champ mtlp vaut '.$this->getMtlp().'<br/>';
		$chaine .= 'Le champ dommage vaut '.$this->getDommage().'<br/>';
		$chaine .= 'Le champ msvg vaut '.$this->getMsvg().'<br/>';
		$chaine .= 'Le champ gabarit vaut '.$this->getGabarit().'<br/>';
		$chaine .= 'Le champ type vaut '.$this->getType().'<br/>';
		$chaine .= 'Le champ fo vaut '.$this->getFo().'<br/>';
		$chaine .= 'Le champ sauvegarde vaut '.$this->getSauvegarde().'<br/>';
		$chaine .= 'Le champ mmvt vaut '.$this->getMmvt().'<br/>';
		$chaine .= 'Le champ encombrement vaut '.$this->getEncombrement().'<br/>';
		$chaine .= 'Le champ deux_mains vaut '.$this->getDeux_mains().'<br/>';
		$chaine .= 'Le champ cout vaut '.$this->getCout().'<br/>';
		$chaine .= 'Le champ date_creation vaut '.$this->getDate_creation().'<br/>';
		$chaine .= 'Le champ used vaut '.$this->getUsed().'<br/>';
		$chaine .= 'Le champ chemin vaut '.$this->getChemin().'<br/>';
		$chaine .= 'Le champ tile vaut '.$this->getTile().'<br/>';
		$chaine .= 'Le champ usure vaut '.$this->getUsure().'<br/>';
		$chaine .= 'Le champ demontable vaut '.$this->getDemontable().'<br/>';
		$chaine .= 'Le champ date_fin_reparation vaut '.$this->getDate_fin_reparation().'<br/>';
		$chaine .= 'Le champ ingame vaut '.$this->getIngame().'<br/>';

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-__toString1]*/	/*[/TAG-__toString1]*/

		return $chaine;
	}

	public function save() {
		//Generated by ObjectGenerator::generateSave() on 03/04/2017 15:27:43
		if ($this->getId() > 0) {
			/* un identifiant superieur a 0 implique un ancien objet => UPDATE */
			$this->update();
		} else {
			$requete = 'INSERT INTO equipement_joueur (id,membre,unite_joueur,nom,description,categorie,cp,lp,mtcp,mtlp,dommage,msvg,gabarit,type,fo,sauvegarde,mmvt,encombrement,deux_mains,cout,date_creation,used,chemin,tile,usure,demontable,date_fin_reparation,ingame)';
			$requete .= ' VALUES ';
			$requete .= '(';
			$requete .= '\'\','; //valeur forcee pour l'insertion
			$requete .= $this->getMembre().',';
			$requete .= $this->getUnite_joueur().',';
			$requete .= '\''.$this->getNom().'\',';
			$requete .= '\''.$this->getDescription().'\',';
			$requete .= $this->getCategorie().',';
			$requete .= '\''.$this->getCp().'\',';
			$requete .= '\''.$this->getLp().'\',';
			$requete .= '\''.$this->getMtcp().'\',';
			$requete .= '\''.$this->getMtlp().'\',';
			$requete .= '\''.$this->getDommage().'\',';
			$requete .= '\''.$this->getMsvg().'\',';
			$requete .= $this->getGabarit().',';
			$requete .= $this->getType().',';
			$requete .= $this->getFo().',';
			$requete .= $this->getSauvegarde().',';
			$requete .= '\''.$this->getMmvt().'\',';
			$requete .= $this->getEncombrement().',';
			$requete .= $this->getDeux_mains().',';
			$requete .= $this->getCout().',';
			$laDate = $this->getDate_creation();
			if (strlen($laDate) > 0) {
				$requete .= '\''.$laDate.'\',';
			} else {
				$requete .= 'NOW(),';
			}
			$requete .= $this->getUsed().',';
			$requete .= '\''.$this->getChemin().'\',';
			$requete .= $this->getTile().',';
			$requete .= $this->getUsure().',';
			$requete .= $this->getDemontable().',';
			$laDate = $this->getDate_fin_reparation();
			if (strlen($laDate) > 0) {
				$requete .= '\''.$laDate.'\',';
			} else {
				$requete .= 'NOW(),';
			}
			$requete .= $this->getIngame().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ')';
			return $requete;
		}
	}

	public function update() {
		//Generated by ObjectGenerator::generateUpdate() on 03/04/2017 15:27:43
		if ($this->getId() == 0 || $this->getId() == null) {
			/* un identifiant 0 ou null implique un nouvel objet => INSERT */
			$this->save();
		} else {
			$requete = 'UPDATE equipement_joueur SET ';
			$requete .= 'membre = '.$this->getMembre().',';
			$requete .= 'unite_joueur = '.$this->getUnite_joueur().',';
			$requete .= 'nom = \''.$this->getNom().'\',';
			$requete .= 'description = \''.$this->getDescription().'\',';
			$requete .= 'categorie = '.$this->getCategorie().',';
			$requete .= 'cp = \''.$this->getCp().'\',';
			$requete .= 'lp = \''.$this->getLp().'\',';
			$requete .= 'mtcp = \''.$this->getMtcp().'\',';
			$requete .= 'mtlp = \''.$this->getMtlp().'\',';
			$requete .= 'dommage = \''.$this->getDommage().'\',';
			$requete .= 'msvg = \''.$this->getMsvg().'\',';
			$requete .= 'gabarit = '.$this->getGabarit().',';
			$requete .= 'type = '.$this->getType().',';
			$requete .= 'fo = '.$this->getFo().',';
			$requete .= 'sauvegarde = '.$this->getSauvegarde().',';
			$requete .= 'mmvt = \''.$this->getMmvt().'\',';
			$requete .= 'encombrement = '.$this->getEncombrement().',';
			$requete .= 'deux_mains = '.$this->getDeux_mains().',';
			$requete .= 'cout = '.$this->getCout().',';
			$laDate = $this->getDate_creation();
			if (strlen($laDate) > 0) {
				$requete .= 'date_creation = \''.$laDate.'\',';
			} else {
				$requete .= 'date_creation = NOW(),';
			}
			$requete .= 'used = '.$this->getUsed().',';
			$requete .= 'chemin = \''.$this->getChemin().'\',';
			$requete .= 'tile = '.$this->getTile().',';
			$requete .= 'usure = '.$this->getUsure().',';
			$requete .= 'demontable = '.$this->getDemontable().',';
			$laDate = $this->getDate_fin_reparation();
			if (strlen($laDate) > 0) {
				$requete .= 'date_fin_reparation = \''.$laDate.'\',';
			} else {
				$requete .= 'date_fin_reparation = NOW(),';
			}
			$requete .= 'ingame = '.$this->getIngame().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ' WHERE id = '.$this->getId();
			return $requete;
		}
	}

	public function delete() {
		//Generated by ObjectGenerator::generateDelete() on 03/04/2017 15:27:43
		if ($this->getId() == 0 || $this->getId() == null) {
			/* ERREUR A FAIRE SORTIR */
			/* TODO */
		} else {
			return 'DELETE FROM equipement_joueur WHERE id = '.$this->getId();
		}
	}

	public function getParent() {
		//Generated by ObjectGenerator::generateGetParent() on 03/04/2017 15:27:43
		return ('parent::__construct($id,$membre,$unite_joueur,$nom,$description,$categorie,$cp,$lp,$mtcp,$mtlp,$dommage,$msvg,$gabarit,$type,$fo,$sauvegarde,$mmvt,$encombrement,$deux_mains,$cout,$date_creation,$used,$chemin,$tile,$usure,$demontable,$date_fin_reparation,$ingame);');
	}

	public function getAttributes() {
		//Generated by ObjectGenerator::generateGetAttributes() on 03/04/2017 15:27:43
		$result = array();
		$result2 = array();
		$reflection = new ReflectionClass($this);
		$result = $reflection->getdefaultProperties();
		$result = array_keys($result);
		foreach ($result AS $data) {
			$result2[] = substr($data,1);
		}
		return $result2;
	}

	public function compareTo($object) {
		//Generated by ObjectGenerator::generateCompareTo() on 03/04/2017 15:27:43
		$data = array();
		if ($object instanceof Equipement_joueur) {
			if ($this->_id != $object->getId()) {
				$data['id'] = $object->getId();
			}
			if ($this->_membre != $object->getMembre()) {
				$data['membre'] = $object->getMembre();
			}
			if ($this->_unite_joueur != $object->getUnite_joueur()) {
				$data['unite_joueur'] = $object->getUnite_joueur();
			}
			if ($this->_nom != $object->getNom()) {
				$data['nom'] = $object->getNom();
			}
			if ($this->_description != $object->getDescription()) {
				$data['description'] = $object->getDescription();
			}
			if ($this->_categorie != $object->getCategorie()) {
				$data['categorie'] = $object->getCategorie();
			}
			if ($this->_cp != $object->getCp()) {
				$data['cp'] = $object->getCp();
			}
			if ($this->_lp != $object->getLp()) {
				$data['lp'] = $object->getLp();
			}
			if ($this->_mtcp != $object->getMtcp()) {
				$data['mtcp'] = $object->getMtcp();
			}
			if ($this->_mtlp != $object->getMtlp()) {
				$data['mtlp'] = $object->getMtlp();
			}
			if ($this->_dommage != $object->getDommage()) {
				$data['dommage'] = $object->getDommage();
			}
			if ($this->_msvg != $object->getMsvg()) {
				$data['msvg'] = $object->getMsvg();
			}
			if ($this->_gabarit != $object->getGabarit()) {
				$data['gabarit'] = $object->getGabarit();
			}
			if ($this->_type != $object->getType()) {
				$data['type'] = $object->getType();
			}
			if ($this->_fo != $object->getFo()) {
				$data['fo'] = $object->getFo();
			}
			if ($this->_sauvegarde != $object->getSauvegarde()) {
				$data['sauvegarde'] = $object->getSauvegarde();
			}
			if ($this->_mmvt != $object->getMmvt()) {
				$data['mmvt'] = $object->getMmvt();
			}
			if ($this->_encombrement != $object->getEncombrement()) {
				$data['encombrement'] = $object->getEncombrement();
			}
			if ($this->_deux_mains != $object->getDeux_mains()) {
				$data['deux_mains'] = $object->getDeux_mains();
			}
			if ($this->_cout != $object->getCout()) {
				$data['cout'] = $object->getCout();
			}
			if ($this->_date_creation != $object->getDate_creation()) {
				$data['date_creation'] = $object->getDate_creation();
			}
			if ($this->_used != $object->getUsed()) {
				$data['used'] = $object->getUsed();
			}
			if ($this->_chemin != $object->getChemin()) {
				$data['chemin'] = $object->getChemin();
			}
			if ($this->_tile != $object->getTile()) {
				$data['tile'] = $object->getTile();
			}
			if ($this->_usure != $object->getUsure()) {
				$data['usure'] = $object->getUsure();
			}
			if ($this->_demontable != $object->getDemontable()) {
				$data['demontable'] = $object->getDemontable();
			}
			if ($this->_date_fin_reparation != $object->getDate_fin_reparation()) {
				$data['date_fin_reparation'] = $object->getDate_fin_reparation();
			}
			if ($this->_ingame != $object->getIngame()) {
				$data['ingame'] = $object->getIngame();
			}
		}
		return $data;
	}

	public function encodeDecodeJSON($json_str='') {
		//Generated by ObjectGenerator::generateEncodeDecodeJSON() on 03/04/2017 15:27:43
		if ($json_str == '') {
			// Objet standard a remplir
			$json= new stdClass();
			foreach ($this as $key => $value) {
				if (substr($key,0,1) == '_') {
					$key = substr($key,1);
					//on evite de faire sortir les objet fonctionnels
					if (strtolower(substr($key,0,1)) != 'o') {
						$json->$key = $value;
					}
				}
				$json->$key = $value;
			}
			return json_encode($json);
		} else {
			/* decodage et hydratation des datas JSON */
			$json = json_decode($json_str, 1);
			foreach ($json as $key => $value) {
				$method = 'set'.ucfirst($key);
				//Si la methode existe alors on l'utilise
				if (method_exists($this, $method)) {
					$this->$method($value);
				}
			}
		}
	}

	public function getClass() {
		//Generated by ObjectGenerator::generateGetClass() on 03/04/2017 15:27:43
		return get_class($this);
	}

	public function getEmpty() {
		//Generated by ObjectGenerator::generateIsEmpty() on 03/04/2017 15:27:43
		return $this->_empty;
	}

	public function affiche() {
		//Generated by ObjectGenerator::generateAffiche() on 03/04/2017 15:27:43
		/* Chargement de Smarty */
		require_once(_SMARTY_LOAD_);
		$smarty->assign('equipement_joueur',$this);
		$smarty->assign('aListeMethodes',get_class_methods($this));
		$smarty->assign('urlVersMiniature',_URL_MINIATURES_.$this->getNom().'.jpg');
		/* Appel de l'affichage pour la classe en cour d'utilisation */
		$smarty->display(_TEMPLATES_BASE_.'classes/Equipement_joueur.tpl');
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Equipement_joueur21]*/
	
	/**
	 * Methode de chargement des membres 
	 */
	public function chargeMembre() {
		$this->setMembreObject();
	}

	/**
	 * Methode de chargement des unite_joueur
	 */
	public function chargeUniteJoueur() {
		$this->setUnite_joueurObject();
	}
	/*[/TAG-Equipement_joueur21]*/

}
?>