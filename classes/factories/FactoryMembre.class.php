<?php
	/*
	 * AUTO-GENERATED FILE on 23/02/2017 14:20:58 BY FactoryGenerator.class.php
	 */

abstract class FactoryMembre {

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Membre11]*/	/*[/TAG-Membre11]*/


	public static function getFromTableMembre($id=-1) {
		//Generated by FactoryGenerator::generateGetAllFromTable()
		$listeObjet = array();
		// Lancement de la requete
		if (empty(self::$_requete)) {
			$requete = 'SELECT * FROM `membre`';
		} else {
			$requete = self::$_requete;
		}
		if (!is_array($id)) {
			if ($id > -1) {
				$requete .= ' WHERE id = :id';
				//Il faut que le parametre soit dans un array pour le BIND
				$id = array(':id' => $id);
			} else {
				/* Tous les objets ==> il faut les ordonner */
				$requete .= ' ORDER BY id ASC';
			}
		} else {
			$requete .= ' WHERE id IN ('.implode(",",$id).') ORDER BY id ASC';
		}
		database::getInstance() -> prepareRequete($requete);
		if (is_array($id) || $id > -1) {
			database::getInstance() -> bind($id);
		}
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception(__CLASS__.'::'.__FUNCTION__.'(): Impossible de lire la table membre');
		}
		// Recuperation des donnees
		$datas = database::getInstance() -> getTableauResultat();
		
	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Membre2]*/	/*[/TAG-Membre2]*/

		/* Traitement des donnees */
		foreach ($datas AS $data) {
			/* objet par defaut */
			$listeObjet[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['groupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['design'],$data['points'],$data['date_der_connexion']);
		
	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-getFromTableMembre1]*/	/*[/TAG-getFromTableMembre1]*/

		}
		if (!empty($listeObjet) && sizeof($listeObjet) == 1) {
			$listeObjet = $listeObjet[0];
		}
		return $listeObjet;
	}

	public static function getFromExtTableGroupe($groupe=0) {
		//Generated by FactoryGenerator::generateGetFromTableFromFK()
		$listeObjet = array();
		// Lancement de la requete
		$requete = 'SELECT * FROM `membre` ';
		if ($groupe == 0) {
			$requete .= 'WHERE groupe > 0 ORDER BY id ASC';
		} else {
			$requete .= 'WHERE groupe = :groupe ORDER BY id ASC';
			//Il faut que le parametre soit dans un array pour le BIND
			$groupe = array(':groupe' => $groupe);
		}
		database::getInstance() -> prepareRequete($requete);
		if (is_array($groupe) || $groupe > 0) {
			database::getInstance() -> bind($groupe);
		}
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception(__CLASS__.'::'.__FUNCTION__.'(): Impossible de lire la table membre');
		}
		// Recuperation des donnees
		$datas = database::getInstance() -> getTableauResultat();
		// Traitement des donnees
		foreach ($datas AS $data) {
			$listeObjet[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['groupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['design'],$data['points'],$data['date_der_connexion']);
		}
		if (sizeof($listeObjet) == 1) {
			$listeObjet = $listeObjet[0];
		}
		return $listeObjet;
	}

	public static function getFromExtTableDesign($design=0) {
		//Generated by FactoryGenerator::generateGetFromTableFromFK()
		$listeObjet = array();
		// Lancement de la requete
		$requete = 'SELECT * FROM `membre` ';
		if ($design == 0) {
			$requete .= 'WHERE design > 0 ORDER BY id ASC';
		} else {
			$requete .= 'WHERE design = :design ORDER BY id ASC';
			//Il faut que le parametre soit dans un array pour le BIND
			$design = array(':design' => $design);
		}
		database::getInstance() -> prepareRequete($requete);
		if (is_array($design) || $design > 0) {
			database::getInstance() -> bind($design);
		}
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception(__CLASS__.'::'.__FUNCTION__.'(): Impossible de lire la table membre');
		}
		// Recuperation des donnees
		$datas = database::getInstance() -> getTableauResultat();
		// Traitement des donnees
		foreach ($datas AS $data) {
			$listeObjet[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['groupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['design'],$data['points'],$data['date_der_connexion']);
		}
		if (sizeof($listeObjet) == 1) {
			$listeObjet = $listeObjet[0];
		}
		return $listeObjet;
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Membre21]*/
	
	public static function getByPseudo($pseudoRecherche) {
		$oMembre = array();
		/* Lancement de la requete */
// 		$requete = 'SELECT * FROM membre WHERE pseudo like \'%'.$pseudoRecherche.'%\'';
		$requete = 'SELECT * FROM membre WHERE pseudo like :pseudo';
		database::getInstance() -> prepareRequete($requete);
		database::getInstance() -> bind(array(':pseudo' => $pseudoRecherche));
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception('Impossible de lire la table Membre');
		}
		/* Recuperation des donnees */
		$datas = database::getInstance() -> getTableauResultat();
		/* Traitement des donnees */
		foreach ($datas AS $data) {
			$oMembre[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['idgroupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['iddesign'],$data['points']);
		}
		return $oMembre;
	}

	public static function getByMail($mailRecherche) {
		$oMembre = array();
		/* Lancement de la requete */
// 		$requete = 'SELECT * FROM membre WHERE mail like \'%'.$mailRecherche.'%\'';
		$requete = 'SELECT * FROM membre WHERE mail like :mail';
		database::getInstance() -> prepareRequete($requete);
		database::getInstance() -> bind(array(':mail' => $mailRecherche));
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception('Impossible de lire la table Membre');
		}
		/* Recuperation des donnees */
		$datas = database::getInstance() -> getTableauResultat();
		/* Traitement des donnees */
		foreach ($datas AS $data) {
			$oMembre[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['idgroupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['iddesign'],$data['points']);
		}
		return $oMembre;
	}

	public static function getByPseudoMail($pseudoRecherche,$mailRecherche) {
		$oMembre = array();
		/* Lancement de la requete */
		$requete = 'SELECT * FROM membre WHERE pseudo = :pseudo and mail = :mail';
		database::getInstance() -> prepareRequete($requete);
		database::getInstance() -> bind(array(':pseudo' => $pseudoRecherche,':mail' => $mailRecherche));
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception('Impossible de lire la table Membre');
		}
		/* Recuperation des donnees */
		$datas = database::getInstance() -> getTableauResultat();
		/* Traitement des donnees */
		foreach ($datas AS $data) {
			$oMembre[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['idgroupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['iddesign'],$data['points']);
		}
		return $oMembre;
	}

	public static function getByPseudoPassword($pseudoRecherche,$passwordRecherche) {
		$oMembre = array();
		/* Lancement de la requete */
		$requete = 'SELECT * FROM membre WHERE pseudo = :pseudo and password = :password';
		database::getInstance() -> prepareRequete($requete);
		database::getInstance() -> bind(array(':pseudo' => $pseudoRecherche,':password' => $passwordRecherche));
		if (! database::getInstance() -> executeRequete()) {
			throw new Exception('Impossible de lire la table Membre');
		}
		/* Recuperation des donnees */
		$datas = database::getInstance() -> getTableauResultat();
		/* Traitement des donnees */
		foreach ($datas AS $data) {
			$oMembre[] = new Membre($data['id'],$data['pseudo'],$data['password'],$data['mail'],$data['date_inscription'],$data['staff'],$data['groupe'],$data['experience'],$data['description'],$data['cle_activation'],$data['avatar'],$data['design'],$data['points']);
		}
		if (sizeof($oMembre) == 1) {
			$oMembre = $oMembre[0];
			/* suppression du password */
			$oMembre->setPassword('');
		} else {
			if (sizeof($oMembre) > 1) {
				throw new Exception(__METHOD__.' (line '.__LINE__.'): Erreur multiple comptes identiques (pseudo = "'.$pseudoRecherche.'")');
			}
		}
		return $oMembre;
	}
	
	public static function getMembreVide() {
		return new Membre();
	}
	/*[/TAG-Membre21]*/


}
?>