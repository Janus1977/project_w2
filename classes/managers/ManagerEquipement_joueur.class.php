<?php
		//Generated by ManagerGenerator::generate() on 03/04/2017 15:27:43
class ManagerEquipement_joueur {
	/** Instance de la classe (managerEquipement_joueur) */
	private static $_instance = null;

	/** Connexion a la base de donnees (database) */
	private static $_oConnexion = null;

	/** Liste des objet de la classe (Equipement_joueur) */
	private static $_aListeEquipement_joueur = array();

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Equipement_joueur11]*/	/*[/TAG-Equipement_joueur11]*/


	protected function __construct() {
		//Generated by ManagerGenerator::generateConstruct() on 03/04/2017 15:27:43
	}

	public function __destruct() {
		//Generated by ManagerGenerator::generateDestruct() on 03/04/2017 15:27:43
		/* TODO ??*/
	}

	public static function getInstance() {
		//Generated by ManagerGenerator::generateGetInstance() on 03/04/2017 15:27:43
		if (is_null(self::$_instance)) {
			self::$_instance = new self;
		}
		return self::$_instance;
	}

	public function __clone() {
		//Generated by ManagerGenerator::generateClone() on 03/04/2017 15:27:43
		throw new Exception(get_class($this).": Le clonage n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function setConnexion() {
		//Generated by ManagerGenerator::generateSetConnexion() on 03/04/2017 15:27:43
		self::$_oConnexion = database::getInstance();/* pas besoin de parametrer, un manager arrive apres la conf */
	}

	public function __set($name,$value) {
		//Generated by ManagerGenerator::generateSet() on 03/04/2017 15:27:43
		throw new Exception(get_class($this).": Le set 'noname' n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function __get($name) {
		//Generated by ManagerGenerator::generateGet() on 03/04/2017 15:27:43
		throw new Exception(get_class($this).": Le get 'noname' n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function getById($value=-1) {
		//Generated by ManagerGenerator::generateGetById() on 03/04/2017 15:27:43
		return FactoryEquipement_joueur::getFromTableEquipement_joueur($value);
	}

	public function getByJoueurId($value) {
		//Generated by ManagerGenerator::generateGetByJoueurId() on 03/04/2017 15:27:43
		return FactoryEquipement_joueur::getFromExtTableJoueur($value);
	}

	public function getFromExtTableMembre($idmembre=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK() on 03/04/2017 15:27:43
		/* Appel de la methode de la Fabrique */
		return FactoryEquipement_joueur::getFromExtTableMembre($idmembre);
	}

	public function deleteCompositeLinksFromMembre($idmembre) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks() on 03/04/2017 15:27:43
		//TODO
	}

	public function getFromExtTableUnite_joueur($idunite_joueur=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK() on 03/04/2017 15:27:43
		/* Appel de la methode de la Fabrique */
		return FactoryEquipement_joueur::getFromExtTableUnite_joueur($idunite_joueur);
	}

	public function deleteCompositeLinksFromUnite_joueur($idunite_joueur) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks() on 03/04/2017 15:27:43
		//TODO
	}

	public function getFromExtTableCategorie($idcategorie=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK() on 03/04/2017 15:27:43
		/* Appel de la methode de la Fabrique */
		return FactoryEquipement_joueur::getFromExtTableCategorie($idcategorie);
	}

	public function deleteCompositeLinksFromCategorie($idcategorie) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks() on 03/04/2017 15:27:43
		//TODO
	}

	public function getFromExtTableGabarit($idgabarit=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK() on 03/04/2017 15:27:43
		/* Appel de la methode de la Fabrique */
		return FactoryEquipement_joueur::getFromExtTableGabarit($idgabarit);
	}

	public function deleteCompositeLinksFromGabarit($idgabarit) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks() on 03/04/2017 15:27:43
		//TODO
	}

	public function getFromExtTableType($idtype=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK() on 03/04/2017 15:27:43
		/* Appel de la methode de la Fabrique */
		return FactoryEquipement_joueur::getFromExtTableType($idtype);
	}

	public function deleteCompositeLinksFromType($idtype) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks() on 03/04/2017 15:27:43
		//TODO
	}

	public function getFromExtTableTile($idtile=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK() on 03/04/2017 15:27:43
		/* Appel de la methode de la Fabrique */
		return FactoryEquipement_joueur::getFromExtTableTile($idtile);
	}

	public function deleteCompositeLinksFromTile($idtile) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks() on 03/04/2017 15:27:43
		//TODO
	}

	public function delete($object=array()) {
		//Generated by ManagerGenerator::generateDelete() on 03/04/2017 15:27:43
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": La suppression se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Equipement_joueur) {
			$oEquipement_joueur = new Equipement_joueur($object['id'],$object['membre'],$object['unite_joueur'],$object['nom'],$object['description'],$object['categorie'],$object['cp'],$object['lp'],$object['mtcp'],$object['mtlp'],$object['dommage'],$object['msvg'],$object['gabarit'],$object['type'],$object['fo'],$object['sauvegarde'],$object['mmvt'],$object['encombrement'],$object['deux_mains'],$object['cout'],$object['date_creation'],$object['used'],$object['chemin'],$object['tile'],$object['usure'],$object['demontable'],$object['date_fin_reparation'],$object['ingame']);
		} else {
			$oEquipement_joueur = $object;
		}
		/* Appel de la methode delete de l'objet */
		/* Tout se passe dans une transaction ouverte plus haut */
			/* Execution de la requete */
		if (database::getInstance()->executeRequete($oEquipement_joueur->delete())) {
			/* Requete OK */
			return true;
		} else {
			/* Requete NOK lancement d'une exception PDO */
			throw new PDOException('Erreur sur delete (Equipement_joueur)');
		}
	}

	public function update($object=array()) {
		//Generated by ManagerGenerator::generateUpdate() on 03/04/2017 15:27:43
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": la mise &agrave; jour se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Equipement_joueur) {
			$oEquipement_joueur = new Equipement_joueur($object['id'],$object['membre'],$object['unite_joueur'],$object['nom'],$object['description'],$object['categorie'],$object['cp'],$object['lp'],$object['mtcp'],$object['mtlp'],$object['dommage'],$object['msvg'],$object['gabarit'],$object['type'],$object['fo'],$object['sauvegarde'],$object['mmvt'],$object['encombrement'],$object['deux_mains'],$object['cout'],$object['date_creation'],$object['used'],$object['chemin'],$object['tile'],$object['usure'],$object['demontable'],$object['date_fin_reparation'],$object['ingame']);
		} else {
			$oEquipement_joueur = $object;
		}
		/* Maintenant on compare avec celle en session */
		if (!empty($_SESSION['equipement_joueur']) && sizeof($_SESSION['equipement_joueur']->compareTo($oEquipement_joueur)) > 0) {
			$_SESSION['equipement_joueur'] = $oEquipement_joueur;
		}
		/* on update car les objets sont different */
		return database::getInstance()->executeRequete($oEquipement_joueur->update());
	}

	public function save($object=array()) {
		//Generated by ManagerGenerator::generateSave() on 03/04/2017 15:27:43
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": la sauvegarde se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Equipement_joueur) {
			$oEquipement_joueur = new Equipement_joueur($object['id'],$object['membre'],$object['unite_joueur'],$object['nom'],$object['description'],$object['categorie'],$object['cp'],$object['lp'],$object['mtcp'],$object['mtlp'],$object['dommage'],$object['msvg'],$object['gabarit'],$object['type'],$object['fo'],$object['sauvegarde'],$object['mmvt'],$object['encombrement'],$object['deux_mains'],$object['cout'],$object['date_creation'],$object['used'],$object['chemin'],$object['tile'],$object['usure'],$object['demontable'],$object['date_fin_reparation'],$object['ingame']);
		} else {
			$oEquipement_joueur = $object;
		}
		/* Appel de la methode update de l'objet */
		return database::getInstance()->executeRequete($oEquipement_joueur->save());
	}

	public function findBy($champ,$data='') {
		//Generated by ManagerGenerator::generateFindBy() on 03/04/2017 15:27:43
		/* creation d'un objet de base de la classe */
		$object = new Equipement_joueur();
		$resultat = array();
		for ($i = 0; $i < sizeof($this -> _aListeEquipement_joueur); $i++) {
			$object = $this -> _aListeEquipement_joueur[$i];
			if ($object -> {'_'.strtolower($champ)} == $data) {
				$resultat[] = $object;
			}
		}
		if (sizeof($resultat) > 0) {
			//existe
			return $resultat;
		} else {
			//n'existe pas
			return "Pas de Equipement_joueur de ".strtolower($champ)." '".$data."'";
		}
	}

	public function getEquipement_joueurVide() {
		//Generated by ManagerGenerator::generateGetObjetVide() on 03/04/2017 15:27:43
		return new Equipement_joueur();
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Equipement_joueur21]*/

	public function setEquipmentsOutOfGame($idCarte) {
		$requete = "UPDATE equipement_joueur SET tile = 0 ";
		$requete .= "WHERE tile IN (SELECT id FROM tile WHERE carte = :carte)";
		database::getInstance()->prepareRequete($requete);
		database::getInstance()->bind(array('carte' => $idcarte));
		return database::getInstance()->executeRequete();
		if (database::getInstance()->executeRequete($requete)) {
	
		} else {
			throw new PDOException('Erreur sur setUnitsOutOfGame (Unite_joueur)');
		}
	}
	
	public function setEquipmentsOutOfCase($idCase) {
		$requete = "UPDATE equipement_joueur SET tile = 0 ";
		$requete .= "WHERE tile = :tile";
		database::getInstance()->prepareRequete($requete);
		database::getInstance()->bind(array('tile' => $idCase));
		return database::getInstance()->executeRequete();
		if (database::getInstance()->executeRequete($requete)) {
	
		} else {
			throw new PDOException('Erreur sur setUnitsOutOfCase (equipement_joueur)');
		}
	}
	
	public function getDamagedEquipment($idjoueur) {
		return FactoryEquipement_joueur::getDamagedEquipment($idjoueur);
	}
	
	public function getRemovableEquipment($idjoueur) {
		return FactoryEquipement_joueur::getRemovableEquipment($idjoueur);
	}
	
	public function attaque($attaquant,$defenseur) {
		if (empty($attaquant) || empty($defenseur)) {
			alerte("ERREUR, Impossible, un des deux beligerent n'existe pas");
			return;
		}
		//20170316,CBA, Code commun
		ManagerEquipement::getInstance()->attaque($attaquant,$defenseur);
		
// 		if ($attaquant instanceof Equipement_joueur) {
// 			// C'est un equipement que a l'action d'attaque (Ex: mine)
					
// 			$oCaseEquipementJoueur = FactoryTile::getFromExtTableEquipementjoueur($attaquant->getId());
// 			if (empty($oCaseEquipementJoueur)) {
// 				alerte("L'unite attaquante (".$attaquant->getNom().") n'est pas sur une table de jeu");
// 				return;
// 			}
// 			$oAttaque = new Actionattaque($attaquant->getCategorie()->getNom());
// 			$rayon = $attaquant->getPorteTotale();
			
// 			if (is_null($defenseur)) {
// 				// la liste des cases dans le rayon de l'arme
// 				$xMin = $oCaseEquipementJoueur->getX() - intval(max($rayon));
// 				if ($xMin < 0) {
// 					$xMin = 0;
// 				}
// 				$xMax = $oCaseEquipementJoueur->getX() + intval(max($rayon));
// 				$yMin = $oCaseEquipementJoueur->getY() - intval(max($rayon));
// 				if ($yMin < 0) {
// 					$yMin = 0;
// 				}
// 				$yMax = $oCaseEquipementJoueur->getY() + intval(max($rayon));
					
// 				$listeCasesAAttaquer = FactoryTile::getBusyCasesCarteFromRange($oCaseEquipementJoueur->getIdcarte(),$xMin,$xMax,$yMin,$yMax);
					
// 				//Maintenant il faut parcourir la liste des unites presentes et lancer les attaques
// 				foreach ($listeCasesAAttaquer AS $oCase) {
// 					$resultCompare = $oCase->compareTo($oCaseEquipementJoueur);
// 					if (!empty($resultCompare)) {
// 						if (!empty($oAttaque)) {
// 							debug("attaque avec equipement");
// 							$oAttaque->attaque($attaquant,$oCase->getUnite());
// 							if ($oAttaque->getBlessures() > 0) {
// 								debug("Blessure(s) du tir rapide: ".$oAttaque->getBlessures());
// 								debug("Assignation des blessures");
// 								$defenseur->encaisse($oAttaque->getBlessures());
// 								if ($defenseur->getPdv() < 0) {
// 									debug("Unit&eacute; d&eacute;truite.");
// 								}
// 							} else {
// 								debug("Pas de blessures");
// 							}
// 						}
// 					}
// 				}
// 			} else {
// 				//au contact ???
// 				debug("attaque avec equipement au contact");
// 				$oAttaque->attaque($attaquant,$defenseur);
// 				if ($oAttaque->getBlessures() > 0) {
// 					debug("Blessure(s) du tir rapide: ".$oAttaque->getBlessures());
// 					debug("Assignation des blessures");
// 					$defenseur->encaisse($oAttaque->getBlessures());
// 					if ($defenseur->getPdv() < 0) {
// 						debug("Unit&eacute; d&eacute;truite.");
// 					}
// 				} else {
// 					debug("Pas de blessures");
// 				}
// 			}
// 		} else if ($attaquant instanceof Equipement) {
// 			ManagerEquipement::getInstance()->attaque($attaquant,$defenseur);
// 		}
	}
	
	public function getListeEquipementsJoueur() {
		return FactoryEquipement_joueur::getFromExtTableMembre();
	}

	public function getCourtePortee($oEquipementJoueur) {
		if ($oEquipementJoueur instanceof Equipement || $oEquipementJoueur instanceof Equipement_joueur) {
// 			ManagerEquipement::getInstance()->getCourtePortee($oEquipementJoueur);
// 		} else {
			return explode('-',$oEquipementJoueur->getCp());
		}
	}

	public function getLonguePortee($oEquipementJoueur) {
		if ($oEquipementJoueur instanceof Equipement || $oEquipementJoueur instanceof Equipement_joueur) {
// 			ManagerEquipement::getInstance()->getLonguePortee($oEquipementJoueur);
// 		} else {
			return explode('-',$oEquipementJoueur->getLp());
		}
	}
	/*[/TAG-Equipement_joueur21]*/


}
?>