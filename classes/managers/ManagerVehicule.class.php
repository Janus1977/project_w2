<?php
		//Generated by ManagerGenerator::generate()
class ManagerVehicule {
	/** Instance de la classe (managerVehicule) */
	private static $_instance = null;

	/** Connexion a la base de donnees (database) */
	private static $_oConnexion = null;

	/** Liste des objet de la classe (Vehicule) */
	private static $_aListeVehicule = array();

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Vehicule11]*/	/*[/TAG-Vehicule11]*/


	protected function __construct() {
		//Generated by ManagerGenerator::generateConstruct()
	}

	public function __destruct() {
		//Generated by ManagerGenerator::generateDestruct()
		/* TODO ??*/
	}

	public static function getInstance() {
		//Generated by ManagerGenerator::generateGetInstance()
		if (is_null(self::$_instance)) {
			self::$_instance = new self;
		}
		return self::$_instance;
	}

	public function __clone() {
		//Generated by ManagerGenerator::generateClone()
		throw new Exception(get_class($this).": Le clonage n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function setConnexion() {
		//Generated by ManagerGenerator::generateSetConnexion()
		self::$_oConnexion = database::getInstance();/* pas besoin de parametrer, un manager arrive apres la conf */
	}

	public function __set($name,$value) {
		//Generated by ManagerGenerator::generateSet()
		throw new Exception(get_class($this).": Le set 'noname' n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function __get($name) {
		//Generated by ManagerGenerator::generateGet()
		throw new Exception(get_class($this).": Le get 'noname' n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function getById($value=-1) {
		//Generated by ManagerGenerator::generateGetById()
		return FactoryVehicule::getFromTableVehicule($value);
	}

	public function getByJoueurId($value) {
		//Generated by ManagerGenerator::generateGetByJoueurId()
		return FactoryVehicule::getFromExtTableJoueur($value);
	}

	public function getFromExtTableVehiculeId($idvehiculeid=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeId($idvehiculeid);
	}

	public function deleteCompositeLinksFromVehiculeId($idvehiculeid) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculeid = '.$idvehiculeid;
	}

	public function getFromExtTableVehiculeNom($idvehiculenom=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeNom($idvehiculenom);
	}

	public function deleteCompositeLinksFromVehiculeNom($idvehiculenom) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculenom = '.$idvehiculenom;
	}

	public function getFromExtTableVehiculeDesc($idvehiculedesc=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeDesc($idvehiculedesc);
	}

	public function deleteCompositeLinksFromVehiculeDesc($idvehiculedesc) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculedesc = '.$idvehiculedesc;
	}

	public function getFromExtTableVehiculeType($idvehiculetype=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeType($idvehiculetype);
	}

	public function deleteCompositeLinksFromVehiculeType($idvehiculetype) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculetype = '.$idvehiculetype;
	}

	public function getFromExtTableVehiculeVie($idvehiculevie=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeVie($idvehiculevie);
	}

	public function deleteCompositeLinksFromVehiculeVie($idvehiculevie) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculevie = '.$idvehiculevie;
	}

	public function getFromExtTableVehiculeAttaque($idvehiculeattaque=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeAttaque($idvehiculeattaque);
	}

	public function deleteCompositeLinksFromVehiculeAttaque($idvehiculeattaque) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculeattaque = '.$idvehiculeattaque;
	}

	public function getFromExtTableVehiculeDefense($idvehiculedefense=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeDefense($idvehiculedefense);
	}

	public function deleteCompositeLinksFromVehiculeDefense($idvehiculedefense) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculedefense = '.$idvehiculedefense;
	}

	public function getFromExtTableVehiculeDeplacement($idvehiculedeplacement=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryVehicule::getFromExtTableVehiculeDeplacement($idvehiculedeplacement);
	}

	public function deleteCompositeLinksFromVehiculeDeplacement($idvehiculedeplacement) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM vehicule WHERE vehiculedeplacement = '.$idvehiculedeplacement;
	}

	public function delete($object=array()) {
		//Generated by ManagerGenerator::generateDelete()
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": La suppression se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Vehicule) {
			$oVehicule = new Vehicule($object['vehiculeId'],$object['vehiculeNom'],$object['vehiculeDesc'],$object['vehiculeType'],$object['vehiculeVie'],$object['vehiculeAttaque'],$object['vehiculeDefense'],$object['vehiculeDeplacement']);
		} else {
			$oVehicule = $object;
		}
		/* Appel de la methode delete de l'objet */
		/* Tout se passe dans une transaction ouverte plus haut */
			/* Execution de la requete */
		if (database::getInstance()->executeRequete($oVehicule->delete())) {
			/* Requete OK */
			return true;
		} else {
			/* Requete NOK lancement d'une exception PDO */
			throw new PDOException('Erreur sur delete (Vehicule)');
		}
	}

	public function update($object=array()) {
		//Generated by ManagerGenerator::generateUpdate()
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": la mise &agrave; jour se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Vehicule) {
			$oVehicule = new Vehicule($object['vehiculeId'],$object['vehiculeNom'],$object['vehiculeDesc'],$object['vehiculeType'],$object['vehiculeVie'],$object['vehiculeAttaque'],$object['vehiculeDefense'],$object['vehiculeDeplacement']);
		} else {
			$oVehicule = $object;
		}
		/* Maintenant on compare avec celle en session */
		if (!empty($_SESSION['vehicule']) && sizeof($_SESSION['vehicule']->compareTo($oVehicule)) > 0) {
			$_SESSION['vehicule'] = $oVehicule;
		}
		/* on update car les objets sont different */
		return database::getInstance()->executeRequete($oVehicule->update());
	}

	public function save($object=array()) {
		//Generated by ManagerGenerator::generateSave()
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": la sauvegarde se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Vehicule) {
			$oVehicule = new Vehicule($object['vehiculeId'],$object['vehiculeNom'],$object['vehiculeDesc'],$object['vehiculeType'],$object['vehiculeVie'],$object['vehiculeAttaque'],$object['vehiculeDefense'],$object['vehiculeDeplacement']);
		} else {
			$oVehicule = $object;
		}
		/* Appel de la methode update de l'objet */
		return database::getInstance()->executeRequete($oVehicule->save());
	}

	public function findBy($champ,$data='') {
		//Generated by ManagerGenerator::generateFindBy()
		/* creation d'un objet de base de la classe */
		$object = new Vehicule();
		$resultat = array();
		for ($i = 0; $i < sizeof($this -> _aListeVehicule); $i++) {
			$object = $this -> _aListeVehicule[$i];
			if ($object -> {'_'.strtolower($champ)} == $data) {
				$resultat[] = $object;
			}
		}
		if (sizeof($resultat) > 0) {
			//existe
			return $resultat;
		} else {
			//n'existe pas
			return "Pas de Vehicule de ".strtolower($champ)." '".$data."'";
		}
	}

	public function getVehiculeVide() {
		//Generated by ManagerGenerator::generateGetObjetVide()
		return new Vehicule();
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Vehicule21]*/	/*[/TAG-Vehicule21]*/


}
?>