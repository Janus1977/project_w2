<?php
		//Generated by ManagerGenerator::generate()
class ManagerMembre {
	/** Instance de la classe (managerMembre) */
	private static $_instance = null;

	/** Connexion a la base de donnees (database) */
	private static $_oConnexion = null;

	/** Liste des objet de la classe (Membre) */
	private static $_aListeMembre = array();

	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Membre11]*/	/*[/TAG-Membre11]*/


	protected function __construct() {
		//Generated by ManagerGenerator::generateConstruct()
	}

	public function __destruct() {
		//Generated by ManagerGenerator::generateDestruct()
		/* TODO ??*/
	}

	public static function getInstance() {
		//Generated by ManagerGenerator::generateGetInstance()
		if (is_null(self::$_instance)) {
			self::$_instance = new self;
		}
		return self::$_instance;
	}

	public function __clone() {
		//Generated by ManagerGenerator::generateClone()
		throw new Exception(get_class($this).": Le clonage n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function setConnexion() {
		//Generated by ManagerGenerator::generateSetConnexion()
		self::$_oConnexion = database::getInstance();/* pas besoin de parametrer, un manager arrive apres la conf */
	}

	public function __set($name,$value) {
		//Generated by ManagerGenerator::generateSet()
		throw new Exception(get_class($this).": Le set 'noname' n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function __get($name) {
		//Generated by ManagerGenerator::generateGet()
		throw new Exception(get_class($this).": Le get 'noname' n'est pas autoris&eacute;", E_USER_ERROR);
	}

	public function getById($value=-1) {
		//Generated by ManagerGenerator::generateGetById()
		return FactoryMembre::getFromTableMembre($value);
	}

	public function getByJoueurId($value) {
		//Generated by ManagerGenerator::generateGetByJoueurId()
		return FactoryMembre::getFromExtTableJoueur($value);
	}

	public function getFromExtTableGroupe($idgroupe=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryMembre::getFromExtTableGroupe($idgroupe);
	}

	public function deleteCompositeLinksFromGroupe($idgroupe) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM membre WHERE groupe = '.$idgroupe;
	}

	public function getFromExtTableDesign($iddesign=-1) {
		//Generated by ManagerGenerator::generateGetFromTableFromFK()
		/* Appel de la methode de la Fabrique */
		return FactoryMembre::getFromExtTableDesign($iddesign);
	}

	public function deleteCompositeLinksFromDesign($iddesign) {
		//Generated by ManagerGenerator::generateDeleteCompositeLinks()
		$requete = 'DELETE FROM membre WHERE design = '.$iddesign;
	}

	public function delete($object=array()) {
		//Generated by ManagerGenerator::generateDelete()
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": La suppression se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Membre) {
			$oMembre = new Membre($object['id'],$object['pseudo'],$object['password'],$object['mail'],$object['date_inscription'],$object['staff'],$object['groupe'],$object['experience'],$object['description'],$object['cle_activation'],$object['avatar'],$object['design'],$object['points'],$object['date_der_connexion']);
		} else {
			$oMembre = $object;
		}
		/* Appel de la methode delete de l'objet */
		/* Tout se passe dans une transaction ouverte plus haut */
			/* Execution de la requete */
		if (database::getInstance()->executeRequete($oMembre->delete())) {
			/* Requete OK */
			return true;
		} else {
			/* Requete NOK lancement d'une exception PDO */
			throw new PDOException('Erreur sur delete (Membre)');
		}
	}

	public function update($object=array()) {
		//Generated by ManagerGenerator::generateUpdate()
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": la mise &agrave; jour se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Membre) {
			$oMembre = new Membre($object['id'],$object['pseudo'],$object['password'],$object['mail'],$object['date_inscription'],$object['staff'],$object['groupe'],$object['experience'],$object['description'],$object['cle_activation'],$object['avatar'],$object['design'],$object['points'],$object['date_der_connexion']);
		} else {
			$oMembre = $object;
		}
		/* Maintenant on compare avec celle en session */
		if (!empty($_SESSION['membre']) && sizeof($_SESSION['membre']->compareTo($oMembre)) > 0) {
			$_SESSION['membre'] = $oMembre;
		}
		/* on update car les objets sont different */
		return database::getInstance()->executeRequete($oMembre->update());
	}

	public function save($object=array()) {
		//Generated by ManagerGenerator::generateSave()
		/* Verification */
		if (empty($object)) {
			throw new Exception(get_class($this).": la sauvegarde se fait sur un objet.", E_USER_ERROR);
		}
		/* si ce n'est pas une instance de la classe, on la cree */
		if (! $object instanceof Membre) {
			$oMembre = new Membre($object['id'],$object['pseudo'],$object['password'],$object['mail'],$object['date_inscription'],$object['staff'],$object['groupe'],$object['experience'],$object['description'],$object['cle_activation'],$object['avatar'],$object['design'],$object['points'],$object['date_der_connexion']);
		} else {
			$oMembre = $object;
		}
		/* Appel de la methode update de l'objet */
		return database::getInstance()->executeRequete($oMembre->save());
	}

	public function findBy($champ,$data='') {
		//Generated by ManagerGenerator::generateFindBy()
		/* creation d'un objet de base de la classe */
		$object = new Membre();
		$resultat = array();
		for ($i = 0; $i < sizeof($this -> _aListeMembre); $i++) {
			$object = $this -> _aListeMembre[$i];
			if ($object -> {'_'.strtolower($champ)} == $data) {
				$resultat[] = $object;
			}
		}
		if (sizeof($resultat) > 0) {
			//existe
			return $resultat;
		} else {
			//n'existe pas
			return "Pas de Membre de ".strtolower($champ)." '".$data."'";
		}
	}

	public function getMembreVide() {
		//Generated by ManagerGenerator::generateGetObjetVide()
		return new Membre();
	}


	/*
	 * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.
	 * Il sera preserve lors de la reconstruction automatique.
	 */
	/*[TAG-Membre21]*/
	
		/**
		 * Methode recherchant un membre avec comme entree un pseudo,
		 * elle est utilisee pour l'inscription d'un nouveau membre
		 * @param string $pseudoRecherche
		 * @return multitype:Membre
		 */
		public function getByPseudo($pseudoRecherche) {
			return FactoryMembre::getByPseudo($pseudoRecherche);
		}
		
		/**
		 * Recherche d'un membre avec son mail, notamment utilise pour reinitialiser
		 * le mot de passe (lien 'mot de passe oublie')
		 * @param string $mailRecherche
		 * @return multitype:Membre
		 */
		public function getByMail($mailRecherche) {
			return FactoryMembre::getByMail($mailRecherche);
		}
		
		/**
		 * Utilise pour la recherche 
		 * @param string $pseudoRecherche
		 * @param string $mailRecherche
		 * @return multitype:Membre
		 */
		public function getByPseudoMail($pseudoRecherche,$mailRecherche) {
			return FactoryMembre::getByPseudoMail($pseudoRecherche,$mailRecherche);
		}
		
		/**
		 * Utilise pour la connexion du membre afin de retourner les information en session
		 * @param string $pseudoRecherche
		 * @param string $mailRecherche
		 * @return multitype:Membre
		 */
		public function getByPseudoPassword($pseudoRecherche,$passwordRecherche) {
			debug($pseudoRecherche,true);
			debug($passwordRecherche,true);
			return FactoryMembre::getByPseudoPassword($pseudoRecherche,$passwordRecherche);
		}
	    
		/**
		 * Retourne un objet vide utilise dans la partie MAJBASE
		 * @return Membre
		 */
// 	    public function getMembreVide() {
// 	    	return FactoryMembre::getMembreVide();
// 	    }

		public function getParties() {
			$requete = "SELECT FROM partie_joueur";
		}
	
	/*[/TAG-Membre21]*/


}
?>