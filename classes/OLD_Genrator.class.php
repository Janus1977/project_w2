<?php
class Generator {
    /** Liste contenant le code specifique present dans les TAG predefinis */
    protected $_aListOfSpecificCode;
    
    /** Adresse root du site */
    protected $_sDocRoot;
    
    /** TAG pour la mémorisation des codes specifiques */
    /** @deprecated */
    protected $_iTagNumber;
    
    /** TAG pour la mémorisation des codes specifiques nommé par fonction */
    protected $_iTagNumberFunction;
    
    /** Nom de la table en cours de traitement */
    private $_sNomTableEnCoursDeTraitement; //private pour passer par les methodes get/set
    
    /** Liste des champs de la table en cours de traitement */
    private $_aListeChampsEnCoursDeTraitement; //private pour passer par les methodes get/set
    
    /** Liste des champs des tables */
    protected $_aListeTablesChamps;
    
    /** Liste des tables */
    private $_aListeTables;
    
    /** Chaine initiale pour le "generated by" */
    protected $_sGeneratedBy;
    
    //Gestion de l'heritage
    /** Tableau des attribuits de la Classe fille en plus de la classe mere */
    private $_aAttributFilleSupp;
    
    /** Objet de la classe mere */
    private $_oClasseMere;
    
    /** Class constructor */
    public function __construct() {
        $this -> _sDocRoot = "";
        $this -> _iTagNumber = 1;
        $this -> _iTagNumberFunction = 1;
        $this -> _aListeTables = array();
        $this -> _aListeTablesChamps = array();
        $this -> _aListOfSpecificCode = array();
        $this -> _sNomTableEnCoursDeTraitement = "";
        $this -> _sGeneratedBy = "\t\t//Generated by <> on ".date("d/m/Y H:i:s")."\n";
        $this -> _aListeChampsEnCoursDeTraitement = array();
        $this -> _aAttributFilleSupp = array();
        $this -> _oClasseMere = null;
    }
    
    protected function setNomTableEnCoursDeTraitement($nomTableEnCoursDeTraitement) {
        $this->_sNomTableEnCoursDeTraitement = $nomTableEnCoursDeTraitement;
    }
    
    protected function getNomTableEnCoursDeTraitement() {
        return $this->_sNomTableEnCoursDeTraitement;
    }
    
    public function setListeTablesChamps($listeTablesChamps) {
        $this->_aListeTablesChamps = $listeTablesChamps;
    }
    
    public function getListeTablesChamps($nomTable='') {
        if (strlen(trim($nomTable)) == 0) {
            return $this->_aListeTablesChamps;
        } else {
            return $this->_aListeTablesChamps[$nomTable];
        }
    }
    
    public function setListeChampsEnCoursDeTraitement($listeTableChamps) {
        $this->_aListeChampsEnCoursDeTraitement = $listeTableChamps;
    }
    
    public function getListeChampsEnCoursDeTraitement() {
        return $this->_aListeChampsEnCoursDeTraitement;
    }
    
    /** Retourne le numero du TAG en cours */
    /** @deprecated */
    protected function getTagNumber() {
        return $this->_iTagNumber;
    }
    
    /** Retourne le numero du TAG par fonction en cours */
    protected function getTagNumberFunction() {
        return $this->_iTagNumberFunction;
    }
    
    /** Modifie le numero du TAG en cours */
    /** @deprecated */
    protected function setTagNumber($newvalue) {
        $this->_iTagNumber = $newvalue;
    }
    
    /** Modifie le numero du TAG par fonction en cours */
    protected function setTagNumberFunction($newvalue) {
        $this->_iTagNumberFunction = $newvalue;
    }
    
    /** Incrémente par la valeur du pas le numero du TAG en cours */
    /** @deprecated */
    protected function incrTagNumber($step=1) {
        $this->_iTagNumber += $step; // le pas par defaut est de 1
    }
    
    /** Incrémente par la valeur du pas le numero du TAG par fonction en cours */
    protected function incrTagNumberFunction($step=1) {
        $this->_iTagNumberFunction += $step; // le pas par defaut est de 1
    }
    
    /** initialise la valeur du pas le numero du TAG en cours */
    /** @deprecated */
    protected function initTagNumber() {
        $this->_iTagNumber = 1;
    }
    
    /** initialise la valeur du pas le numero du TAG par fonction en cours */
    protected function initTagNumberFunction() {
        $this->_iTagNumberFunction = 1;
    }
    
    protected function getGeneratedBy($generator) {
        return str_replace('<>', $generator, $this->_sGeneratedBy);
    }
    
    /** Renseigne le nom de la classe mere */
    protected function setClasseMere($nomClasseMere) {
        $this->_classeMere = $nomClasseMere;
    }
    
    /** Retourne le nom de la classe mere */
    protected function getClasseMere() {
        return $this->_classeMere;
    }
    
    /** Renseigne l'attribut des attributs supplémentaires de la classe fille */
    protected function setAttributsFilleSup($aAttributFilleSupp) {
        $this->_aAttributFilleSupp = $aAttributFilleSupp;
    }
    
    /** Retourne le tableau des attributs supplémentaires de la classe fille */
    protected function getAttributsFilleSup() {
        return $this->_aAttributFilleSupp;
    }
    
    protected function setListeTables($aListeTable) {
        $this->_aListeTables = $aListeTable;
    }
    
    /**
     * Méthode accesseur de l'attribut liste des tables
     * de la base
     * @return array la liste des tables
     */
    protected function getListeTables() {
        return $this->_aListeTables;
    }
    
    /**
     * Methode de placement des TAGs de code personalise afin de ne pas les perdre
     * sur une modification automatisee. Le TAG portera le nom de la fonction dans
     * laquelle il se ttrouve ainsi qu'nu numero incremental (1,2)
     * @param string $functionName
     * @param string $smarty
     * @return string
     */
    protected function addSpecificCodeTagFunction($functionName,$smarty=false) {
        $chaine = "\n\t/*";
        $chaine .= "\n\t * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.";
        $chaine .= "\n\t * Il sera preserve lors de la reconstruction automatique.";
        $chaine .= "\n\t */";
        
        /* Balises ouvrante de code specifique */
        $chaine .= "\n\t/*[TAG-".$functionName.$this->getTagNumberFunction()."]*/";
        
        if (array_key_exists('TAG-'.$functionName.$this->getTagNumberFunction(),$this -> _aListOfSpecificCode)) {
            /* On remet le code specifique du TAGx */
            $chaine .= "\n".$this -> _aListOfSpecificCode['TAG-'.$functionName.$this->getTagNumberFunction()];
        }
        /* Balises fermante de code specifique */
        $chaine .= "\t/*[/TAG-".$functionName.$this->getTagNumberFunction()."]*/\n\n";
        
        $this->incrTagNumberFunction();
        
        return $chaine;
    }
    
    
    /**
     * @deprecated
     * Remplace par addSpecificCodeTagFunction().
     *
     * @param string $smarty
     * @return string
     */
    protected function addSpecificCodeTag($smarty=false) {
        if ($smarty === false) {
            $chaine = "\n\t/*";
            $chaine .= "\n\t * Entre ces deux balises vous pourrez mettre votre code specifique a la classe.";
            $chaine .= "\n\t * Il sera preserve lors de la reconstruction automatique.";
            $chaine .= "\n\t */";
            
            /* Balises ouvrante de code specifique */
            $chaine .= "\n\t/*[TAG".$this->getTagNumber()."]*/";
            
            if (array_key_exists('TAG'.$this->getTagNumber(),$this -> _aListOfSpecificCode)) {
                /* On remet le code specifique du TAGx */
                $chaine .= "\n".$this -> _aListOfSpecificCode['TAG'.$this->getTagNumber()];
            }
            /* Balises fermante de code specifique */
            $chaine .= "\t/*[/TAG".$this->getTagNumber()."]*/\n\n";
        } else {
            $chaine = "\n\t{*";
            $chaine .= "\n\t\tEntre ces deux balises vous pourrez mettre votre code specifique a la classe.";
            $chaine .= "\n\t\tIl sera preserve lors de la reconstruction automatique.";
            $chaine .= "\n\t *}";
            
            /* Balises ouvrante de code specifique */
            $chaine .= "\n\t{*[TAG".$this->getTagNumber()."]*}";
            
            if (array_key_exists('TAG'.$this->getTagNumber(),$this -> _aListOfSpecificCode)) {
                /* On remet le code specifique du TAGx */
                $chaine .= "\n".$this -> _aListOfSpecificCode['TAG'.$this->getTagNumber()];
            }
            /* Balises fermante de code specifique */
            $chaine .= "\t{*[/TAG".$this->getTagNumber()."]*}\n\n";
        }
        
        //increment du tag pour le prochain
        $this->incrTagNumber();
        
        return $chaine;
    }
    
    
    /**
     * Methode de verification que la Classe (ne) possede (pas) une Classe Mere.
     * @param array $tables
     * @return boolean
     */
    protected function isInheritance($tables) {
        $tmp = explode("_",$this->getNomTableEnCoursDeTraitement());
        if (sizeof($tmp) == 2) {
            foreach ($tables AS $table) {
                /* recherche de la table mere */
                $value = strpos($this->getNomTableEnCoursDeTraitement(),$table);
                if ($value !== false && $value == 0 &&
                    $this->getNomTableEnCoursDeTraitement() != $table) {
                        $uTable = ucfirst($table);
                    } else {
                        //Cas des generation unitaire
                        $uTable = ucfirst($tmp[0]);
                    }
                    $this->setClasseMere(new $uTable);
                    /* recherche du ou des attributs supplementaires */
                    $attributsMere = $this->getClasseMere()->getAttributes();
                    $attributsFille = array();
                    foreach ($this->getListeChampsEnCoursDeTraitement() AS $champ) {
                        $attributsFille[] = $champ['Field'];
                    }
                    /* Memorisation des attributs supplementaires */
                    $this->setAttributsFilleSup(array_diff($attributsFille,$attributsMere));
            }
            return true;
        }
        return false;
    }
    
    public function setDocRoot($docRoot) {
        $this -> _sDocRoot = $docRoot;
    }
} //end of generateur class
?>